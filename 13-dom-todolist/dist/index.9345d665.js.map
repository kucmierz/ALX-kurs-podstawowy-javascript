{"mappings":"AAAA,MAAM,WAAW,SAAS,aAAa,CAAC;AAExC,IAAI,QAAQ,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC;AAE5C,IAAI,CAAC,OACH,QAAQ,EAAE;AAGZ,wFAAwF;AACxF,aAAa,OAAO,CAAC,iBAAiB;AAEtC,MAAM,kBAAkB,CAAC,QAAU;IACjC,0CAA0C;IAC1C,IAAI,MAAM,MAAM,CAAC,IAAI,IAAI,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE;QACpD,8CAA8C;QAC9C,MAAM,cAAc;QACpB,qEAAqE;QACrE,aAAa,OAAO,CAAC,iBAAiB,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM;QACjE,6BAA6B;QAC7B,OAAO,QAAQ,CAAC,IAAI,GAAG;IACzB,CAAC;IAGD,6CAA6C;IAC7C,IAAI,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE;QAC3B,6BAA6B;QAE7B,uEAAuE;QACvE,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,OAAQ;YACzC,OAAO,KAAK,EAAE,KAAK,SAAS,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE;QACrD;QACA,gBAAgB;QAChB,aAAa,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;QAC7C,uFAAuF;QACvF,QAAQ;QAER,kBAAkB;QAClB,MAAM,MAAM,CAAC,aAAa,CAAC,MAAM;IACnC,CAAC;AAGD,2BAA2B;AAC3B,gCAAgC;AAEhC,gFAAgF;AAChF,uEAAuE;AACvE,6BAA6B;AAC7B,0DAA0D;AAC1D,yCAAyC;AACzC,IAAI;AACN;AAGA,MAAM,OAAO,CAAC,CAAA,OAAQ;IACpB,SAAS,SAAS,IAAI,CAAC;;gBAET,EAAE,KAAK,MAAM,CAAC;WACnB,EAAE,KAAK,OAAO,CAAC;0CACgB,EAAE,KAAK,EAAE,CAAC;oBAChC,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;;IAE/C,CAAC;AACL;AAEA,SAAS,gBAAgB,CAAC,SAAS","sources":["js/index.js"],"sourcesContent":["const todoList = document.querySelector('#todoList');\n\nlet todos = JSON.parse(localStorage.getItem('todos'));\n\nif (!todos) {\n  todos = [];\n}\n\n// dla bezpieczenstwa czyszczenie zmiennej - gdyby ktos nie edytowal, a wrocil ze strony\nlocalStorage.setItem('currentTodoId', '');\n\nconst handleListClick = (event) => {\n  // sprawdzenie klikania w link - do edycji\n  if (event.target.href && event.target.dataset.editid) {\n    // resetuje domyslne przekierowanie przy linku\n    event.preventDefault();\n    // przy edycji, potrzebuje do LS przekazac id elementu, ktory edytuje\n    localStorage.setItem('currentTodoId', event.target.dataset.editid);\n    // przejscie na strone edycji\n    window.location.href = \"/edit.html\";\n  }\n\n\n  // sprawdzenie, iz klikam w guzik do usuwania\n  if (event.target.dataset.id) {\n    // console.log(event.target);\n\n    // usuwanie z tablicy obiektow, raobimy zawsze za pomoca funkcji filter\n    const filteredTodos = todos.filter(todo => {\n      return todo.id !== parseInt(event.target.dataset.id);\n    })\n    // usuwanie z LS\n    localStorage.setItem('todos', JSON.stringify(filteredTodos));\n    // potrzebujemy nadpisac tablice todos, poniewaz chcemy usunac wiele elementow po sobie\n    todos = filteredTodos;\n\n    // usuwanie z html\n    event.target.parentElement.remove();\n  }\n\n\n  // ponizej moje rozwiazanie\n  // if (event.target.id !== '') {\n\n  //   const filteredResults = todos.filter(elem => elem.id !== +event.target.id);\n  //   // dodanie plusika powoduje szybkie formatowanie stringa na number\n  //   todos = filteredResults;\n  //   localStorage.setItem('todos', JSON.stringify(todos));\n  //   event.target.parentElement.remove();\n  // }\n}\n\n\ntodos.forEach(todo => {\n  todoList.innerHTML += `\n      <li>\n        <strong>${todo.author}</strong> napisal\n        <p>${todo.message}</p>\n        <a href=\"/edit.html\" data-editid=\"${todo.id}\"> Edycja > </a>\n        <button id=\"${todo.id}\" data-id=\"${todo.id}\"> Usun </button>\n      </li>\n    `\n})\n\ntodoList.addEventListener('click', handleListClick);"],"names":[],"version":3,"file":"index.9345d665.js.map","sourceRoot":"/__parcel_source_root/"}